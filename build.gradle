plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

def ENV = System.getenv()

base {
	archivesName = project.archives_base_name
}

repositories {

	mavenLocal()
	mavenCentral()

	exclusiveContent {

		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}

		filter {
			includeGroup "maven.modrinth"
		}

	}
	maven {
		name = "Ladysnake Mods (Releases)"
		url = "https://maven.ladysnake.org/releases"
	}
	maven {
		name = "Ladysnake Mods (Snapshots)"
		url = "https://maven.ladysnake.org/snapshots"
	}
	maven {
		url = "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		url = "https://maven.cafeteria.dev"
		content {
			includeGroup "net.adriantodt.fabricmc"
		}
	}
	maven {
		url = "https://maven.shedaniel.me"
	}
	maven {
		url = "https://maven.terraformersmc.com"
	}
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//	Apoli
	include(modApi("io.github.apace100:apoli:${project.apoli_version}"))

	//	Cardinal Components
	modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	//	Cloth Config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	//	Mod Menu
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

	//	Reach Entity Attributes
	include(modApi("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_version}"))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility  = JavaVersion.VERSION_17
}

jar {
	from ("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			from components.java
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		mavenLocal()
		if (ENV.MAVEN_URL && ENV.MAVEN_USERNAME && ENV.MAVEN_PASSWORD) {
			maven {
				url = ENV.MAVEN_URL
				credentials {
					username = ENV.MAVEN_USERNAME
					password = ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}
